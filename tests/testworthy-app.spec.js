// const { test, expect, request } = require("../fixtures/base")


// const loginData = require("../data/loginData.json")
// const projectData = require("../data/project-creation-data.json")
// const testSuiteData = require("../data/test-suite-data.json")
// const testCaseData = require("../data/test-case-data.json")
// const userRoleData = require("../data/user-roles-data.json")

// const random = Math.random()
// const randomProjectName = `${projectData.projectName}`+random
// const randomEmail = 'testemail'+random+'@yopmail.com'



// test.describe.serial("e2e Test", () => {
//     test.beforeEach(async ({ page, loginPage }) => {
//         await loginPage.navigate()
//         await loginPage.clickHomePageLoginBtn()
//         await expect(page).toHaveURL(`${loginData.loginUrl}`)
//         await loginPage.enterEmail(`${loginData.username}`)
//         await loginPage.enterPassword(`${loginData.password}`)
//         await loginPage.clickLoginBtn()        
//         await expect(page).toHaveURL(`${loginData.dashboardUrl}`)
//     })

//     test("Add New Project", async ({ projectPage }) => {
//         await projectPage.clickAddProjectBtn()
//         await projectPage.enterProjectName(randomProjectName)
//         await projectPage.enterProjecDescription(`${projectData.projectDescription}`)
//         await projectPage.clickDropdown()
//         await projectPage.selectDropdownValue(`${projectData.collaboratorName}`, 1)
//         await projectPage.clickSaveProject()
//         await projectPage.clickProjectTabBtn()
//     })

//     test("Edit Project Description", async ({ page, projectPage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(5000)
//         await projectPage.clickProjectEditBtn()
//         await projectPage.enterProjecDescription(`${projectData.projectDescUpdated}`)
//         await projectPage.clickSaveProject()
//         await expect(projectPage.assertDescription).toHaveText(`${projectData.projectDescUpdated}`)
//     })

//     test("Add Test Suite", async ({ page, projectPage, testSuitePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickAddTestSuiteBtn()
//         await testSuitePage.enterTestSuiteTitle(`${testSuiteData.testSuiteName}`)
//         await testSuitePage.enterTestSuiteDescription(`${testSuiteData.testSuiteDescription}`)
//         await testSuitePage.clickSaveTestSuite()
//         await expect(testSuitePage.successMsg).toHaveText(`${testSuiteData.tsSuccessMsg}`)
//     })

//     test("Edit Test Suite", async ({ page, projectPage, testSuitePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickEditTestSuite()
//         await testSuitePage.enterTestSuiteDescription(`${testSuiteData.tsDescUpdated}`)
//         await testSuitePage.clickSaveTestSuite()
//         await page.waitForTimeout(2000)
//         await expect(testSuitePage.assertDescription).toHaveText(`${testSuiteData.tsDescUpdated}`)
//     })

//     test("Add New Section", async ({ page, projectPage, testSuitePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickAddSection()
//         await testSuitePage.enterSectionName(`${testSuiteData.sectionName}`)
//         await testSuitePage.enterSectionDescription(`${testSuiteData.iSectionDescription}`)
//         await testSuitePage.clickSaveSection()
//         await expect(testSuitePage.assertSectionAddSucessMsg).toHaveText(`${testSuiteData.sectionAddSucessMsg}`)
//     })

//     test("Add Second Section", async ({ page, projectPage, testSuitePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickAddSections()
//         await testSuitePage.enterSectionName(`${testSuiteData.iiSectionName}`)
//         await testSuitePage.enterSectionDescription(`${testSuiteData.iiSectionDescription}`)
//         await testSuitePage.clickSaveSection()
//         await expect(testSuitePage.assertSectionAddSucessMsg).toHaveText(`${testSuiteData.sectionAddSucessMsg}`)
//     })

//     test("Edit Second Section", async ({ page, projectPage, testSuitePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickEditSection2()
//         await testSuitePage.enterSectionName(`${testSuiteData.sectionEditedName}`)
//         await testSuitePage.enterSectionDescription(`${testSuiteData.sectionEditedDescription}`)
//         await page.waitForTimeout(2000)
//         await testSuitePage.clickSavedEditedSection()
//         await expect(testSuitePage.assertEditedSectionSuccessMsg).toHaveText(`${testSuiteData.secEditedSuccessMsg}`)
//     })

//     test("Delete Second Section", async ({ page, projectPage, testSuitePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickDeleteSection2()
//         await testSuitePage.clickDeleteConfirm()
//         await page.waitForTimeout(2000)
//     })

//     test("Add New Test Case", async ({ page, projectPage, testSuitePage, testCasePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickAddTestCase()
//         await page.waitForTimeout(3000)
//         await expect(testCasePage.assertTestCasePageHeading).toHaveText(`${testCaseData.testCasePageHeading}`)
//         await testCasePage.enterTitle(`${testCaseData.testCaseTitle}`)
//         await testCasePage.enterEstimate(`${testCaseData.testCaseEstimates}`)
//         await testCasePage.enterReference(`${testCaseData.testCaseReference}`)
//         await testCasePage.selectType(`${testCaseData.tcTypeCompatibility}`)
//         await testCasePage.selectPriority(`${testCaseData.tcPriorityP3}`)
//         await testCasePage.enterDescription(`${testCaseData.testCaseDescription}`)
//         await testCasePage.checkToAutomate()
//         await testCasePage.checkAutomated()
//         await testCasePage.checkSmoke()
//         await testCasePage.checkRegression()
//         await testCasePage.enterPrecondition(`${testCaseData.tcPrecondition}`)
//         await testCasePage.enterTestData(`${testCaseData.tcTestData}`)
//         await testCasePage.enterSteps(`${testCaseData.tcSteps}`)
//         await testCasePage.enterExpectedResult(`${testCaseData.tcExpectedResult}`)
//         await testCasePage.enterBddGherkin(`${testCaseData.tcBddGherkin}`)
//         await testCasePage.enterCucumberTags(`${testCaseData.tcCucumberTag}`)
//         await testCasePage.clickSaveTestCase()
//         await page.waitForTimeout(2000)
//         await expect(testCasePage.assertSaveTcTitle).toHaveText(`${testCaseData.testCaseTitle}`)
//     })

//     test("Edit Test Case", async ({ page, projectPage, testSuitePage, testCasePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(2000)
//         await testCasePage.clickOpenTestCase(`${testCaseData.tcEditTitle}`)
//         await page.waitForTimeout(2000)
//         await expect(testCasePage.assertSaveTcTitle).toHaveText(`${testCaseData.tcEditTitle}`)
//         await testCasePage.clickEditTestCase()
//         await expect(testCasePage.assertTestCasePageHeading).toHaveText(`${testCaseData.tcEditedHeading}`)
//         await testCasePage.enterTitle(`${testCaseData.tcEditTitle}`)
//         await testCasePage.enterEstimate(`${testCaseData.tcEditEstimates}`)
//         await testCasePage.enterReference(`${testCaseData.tcEditReference}`)
//         await testCasePage.selectType(`${testCaseData.tcTypeFunctional}`)
//         await testCasePage.selectPriority(`${testCaseData.tcPriorityP2}`)
//         await testCasePage.enterDescription(`${testCaseData.tcEditDescription}`)
//         await testCasePage.uncheckToAutomate()
//         await testCasePage.uncheckRegression()
//         await testCasePage.enterPrecondition(`${testCaseData.tcEditPrecondition}`)
//         await testCasePage.enterTestData(`${testCaseData.tcEditedTestData}`)
//         await testCasePage.enterSteps(`${testCaseData.tcEditedSteps}`)
//         await testCasePage.enterExpectedResult(`${testCaseData.tcEditedExpectedResult}`)
//         await testCasePage.enterBddGherkin(`${testCaseData.tcEditedBddGherkin}`)
//         await testCasePage.enterCucumberTags(`${testCaseData.tcEditedCucumberTag}`)
//         await testCasePage.clickSaveTestCase()
//         await expect(testCasePage.assertSaveTcTitle).toHaveText(`${testCaseData.tcEditTitle}`)
//     })

//     test("Add Second Test Case Directly", async ({ page, projectPage, testSuitePage, testCasePage }) => {
//         await projectPage.clickProjectTabBtn()
//         await projectPage.clickOpenProjectByName(randomProjectName)
//         await page.waitForTimeout(2000)
//         await projectPage.clickTestSuiteTab()
//         await page.waitForTimeout(3000)
//         await testSuitePage.clickOpenTestSuite(`${testSuiteData.testSuiteName}`)
//         await page.waitForTimeout(3000)
//         await testCasePage.clickAddTestCaseExternally()
//         await testCasePage.enterNewTcTitle(`${testCaseData.tcAddedExternally}`)
//         await testCasePage.clickAddTcExternal()
//         await expect(testCasePage.addedTcSucessMsg).toHaveText(`${testCaseData.addedTcSucessText}`)
//     })

//     test("Add New User", async ({ page, userRolesPage }) => {
//         await userRolesPage.clickUserRolesTab()
//         await expect(userRolesPage.assertTabOpen).toHaveText(`${userRoleData.pageOpenHeading}`)
//         await userRolesPage.clickAddUser()
//         await expect(userRolesPage.assertAddUserModalHeading).toHaveText(`${userRoleData.AddUserModalHeading}`)
//         await userRolesPage.enterFirstName(`${userRoleData.userFirstName}`)
//         await userRolesPage.enterLasttName(`${userRoleData.userLastName}`)
//         await userRolesPage.enterEmail(randomEmail)
//         await userRolesPage.selectRole(`${userRoleData.roleTester}`)
//         await userRolesPage.selectProject(`${userRoleData.projectName}`)
//         await page.waitForTimeout(2000)
//         await page.keyboard.press('Escape')
//         await userRolesPage.clickSaveUser()
//     })

//     test("Edit User", async ({ page, userRolesPage }) => {
//         await userRolesPage.clickUserRolesTab()
//         await expect(userRolesPage.assertTabOpen).toHaveText(`${userRoleData.pageOpenHeading}`)
//         await userRolesPage.searchUser(randomEmail)
//         await page.waitForTimeout(3000)
//         await userRolesPage.hoverUserRow()
//         await userRolesPage.clickEdit()
//         await expect(userRolesPage.assertAddUserModalHeading).toHaveText(`${userRoleData.userEditHeading}`)
//         await userRolesPage.enterFirstName(`${userRoleData.userEditFirstName}`)
//         await userRolesPage.enterLasttName(`${userRoleData.userEditLastName}`)
//         await userRolesPage.selectProject(`${userRoleData.projectNameEdit}`)
//         await page.waitForTimeout(2000)
//         await page.keyboard.press('Escape')
//         await userRolesPage.clickSaveUser()
//         await expect(userRolesPage.assertNameAfterEdit).toHaveText(`${userRoleData.userEditFirstName}`+` `+`${userRoleData.userEditLastName}`)
//         await page.waitForTimeout(5000)
//     })

//     test("Reset User Password", async ({ page, userRolesPage }) => {
//         await userRolesPage.clickUserRolesTab()
//         await expect(userRolesPage.assertTabOpen).toHaveText(`${userRoleData.pageOpenHeading}`)
//         await userRolesPage.searchUser(randomEmail)
//         await page.waitForTimeout(3000)
//         await userRolesPage.hoverUserRow()
//         await userRolesPage.clickResetPass()
//         await expect(userRolesPage.assertConfirmationHeading).toHaveText("Confirmation")
//         await expect(userRolesPage.assertModalEmail).toHaveText(randomEmail)
//         await userRolesPage.clickModalResetPass()
//     })
// })
